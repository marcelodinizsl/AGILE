https://msdn.microsoft.com/en-us/library/dn223671(v=pandp.30).aspx
@ DEPENDENCY INJECTION

Loose Coupling - It's a opposed to tight coupling, means reducing the number of dependencies between the components that make up your system. This makes it easier and safer to make changes in one area of the system because each part of the system is largely independent of the other.

It's possible address some of the most of the most common requirements in enterprise applications by adopting a loosely design to minimize the dependencies between the different part of your application. However, if a class does not directly instantiate the other that it needs, some other class or component must take on this responsibility. We can use patterns that you can use to manage how objects are instantiated in our application before focusing specifically on dependency injection as the mechanism to use in enterprise applications.

Factories, service locators and depen injection are all approaches you can take to move the responsibility for instantiating and managing objects on behalf of other client objects.

# FACTORY PATTERNS

There are three common factory patterns 
- The Factory Method
- Abstract Factory patterns
- Simple Factory PATTERNS

$ THE FACTORY METHOD PATTERN

This pattern enables you to modify the behavior of a class without modifying the class itself by using inheritance.

public class Managment
{
   protected ITenantStore tenantStore;
   
   public Management()
   {
      this.tenantStore = CreateTenantStore();
   }
   
   protected virtual ITenantStore CreateTrenantStore()
   {
	  return new TenantStore();
   }
   
   public ActionResult Index()
   {
      var model = this.tenantStore.GetTenantNames();
	  
	  return this.View(model);
   }
}

public class SQLManagment: Management
{
   protected override ITenantStore CreateTenantStore()
   {
      ...
	  return SQLTenantStore();
   }
}

This approach results in a flexible and extensible design and impements the open/closed principle. However, it does not result in a maintainable solution because all the client classes that use the TenantStore class are still responsable for instantiating TenantStore instances correctly and consistently. It is also still difficult to test the Management class because it depends on the TeanantStore type.
One approach to testing would be to create a MockManagement type that derives from Management and that uses a mock storage implementation to return test data: in other words you must create two mock types to manage testing.

$ Single Factory PATTERN

While the factory method pattern does not remove the dependencies from the high-level client class, such as the Management class, on the low-level, you can achieve this with the simple factory pattern.

public class Management
{
  private readonly ITenantStore tenantStore;
  
  public Management()
  {
	var tenantStoreFactory =  new TenantStoreFactory();
	this.tenantStore = tenantStoreFactory.CreateTenantStore();
  }
  
  public ActionResult Index()
  {
	var mode = this.tenantStore.GetTenantNames();
	
	return this.View(model);
  }
}

This approach removes much of the complexity from the high-level Management class, although in this example the Management class is still responsible for selecting the specific type of tenant store to use. We could easily move this logic into the factory class that could read a configuration setting to determine whether to create a Blob or a Sql instance. Making the factory class responsable for selecting the specifif type to create  makes it easier to apply a consistent approach throughout the application.

$ ABSTRACT FACTORY PATTERN

One of the problems that can arise from using the simple factory pattern in a large application is that it can be difficult to maintain consistency. The application may include multiple store classes such as SurveyStore, LogoStore and ReportStore classes in addition to the TenantStore classe.
The abstract factory pattern is useful if you have a requirement to create families of related objects in a consistent way.

$ SERVICE LOCATOR PATTERN

Using a service locator provides another variation to this general approach of using another class to create objects on you behalf. It's like as a registry that you can look up an instance of an object or service that another class in your application created and registered with the service locator. The service locator might support querying for objects by a string key or by interface type.

Often, in constrast to the factory patterns where the factory creates the object but gives responsability for managing the lifetime to the client class, the service locator is responsable for managing the lifetime of the object and simply returns a reference to the client. Also, factories are typically responsible for creating instances of specific types or families of types as in the case of the abstract factory pattern, while a service locator may be capable of returning a reference to an object of any type in the application.

Any classes that retrieve object references or service references from the service locator will  have a dependency on the service locator itself.

$ DEPENDENCY INJECTION

A common feature of the all the factory patterns and the service locator pattern, is that it is still the high-level client object's responsability to resolve its own dependencies by requesting the specific of the types that it needs.

They each adopt a pull model of varying degrees of sophistication, assigning various responsabilities to the factory or service locator. The pull model also means that the high-level client class has a dependency on the class that is responsible for creating of locating the object it wants to use. This also means that the dependencies of the high-level client are hidden inside of those classes rather specified in a single location, making them harder to test.

Dependency injection takes the opposite approach, adopting a push model in place of the pull model. Inversion of Control is a term that's often used to describe this push model and dependency injection is one specific implementation of the inversion of control technique.
With dependency injection, another class is responsible for injecting (pushing) the dependencies into the high-level client classes, at the runtime.

Martin Fowler -> With service locator the application class asks for it explicity by a message to the locator. With injection there is no explicit request, the service appears in the application class - hence the inversion of control."

public class Management
{
	private readonly ITenantStore tenantStore;
	
	public Management(ITenantStore tenantStore)
	{
		this.tenantStore = tenantStore;
	}
	
	public ActionResult Index()
	{
		var model = this.tenantStore.GetTenantNames();
		...
		return this.View(model);
	}
}

The Management constructor receives an ITenantStore instance as a parameter, injected by some other class. The only dependency in the Management class in on the interface type. The class that is responsible for instantiating the TenanStore object and inserting it into the Management class is called the DependencyInjectionContainer class. Using a container is easier and provides additional capabilities such as lifetime management, interception and registration by convention.
	
	$ OBJECT COMPOSITION
	
	Your application requires a class or  component that is responsible for instantiating all the required objects and passing them into the correct constructors, methods, and properties: your application must know how to compose its object graph before it can perform any work. This must happen very early in the application's lifecycle: The Main method of a console application, in the Global.asax in a web application, in a role's OnStart method in a Windows Azure application, or in the initialization code for a test method.
	
	$ OBJECT LIFETIME
	
	You should determine when to create the objects in your application based on criteria such as which object is responsible for managing the state, is the object shared, and how long the object will live for. Depending on the specific requirements and structure of your application, you might want each client class to have its own ITenantStore object, or have all the client classes share the same ITenantStore instance, or for different groups of client each have their own ITenantStore instance.
	Whichever way you create an object, there is always a trade-off between performance and resource utilization when you decide where to instantiate it.

	# TYPES OF INJECTION
	
	Typically, when  you instantiate an object you invoke a class constructor and pass any values that the object needs as parameters to the constructor.
	In the example above, is a constructor injection and is the type of injection most common. There are other types of injection such as property setter injection and method call injection, but they are less commonly used.
	
	$ PROPERTY SETTER INJECTION
	
	As an alternative or in addition to passing a parameter to a constructor, you may want to set a property value when instantiate a object in your application.
	
	public class AzureTable<T>
	{
		public AzureTable(StorageAccount account) : this (account, typeof(T).Name)
		{}
		
		public IAzureTableRWSStrategy ReadWriteStrategy
		{get;set;}
	}
	
	Notice that the constructors are not responsible for setting the read/write strategy and that the type of the ReadWriteStrategy property is an interface type. 
	You should only use property setter injection if the class has a usable default value for the property. While you cannot forget to call a constructor, you can forget to set a property such as the ReadWriteStrategy property in the example above.
You should use property setter injection when the dependency is optional. However don't use property setter injection as a technique to avoid polluting your constructor with multiple dependencies; too many dependencies might be an indicator of poor desing because it is placing too much responsibility in a single class.

$ METHOD CALL INJECTION

In a similar way to using property setter injection, you might want to invoke a method when application instantiates an object to perfom some initialization that is not convenient to perfom in a constructor.

public class MessageQueue<T>
{
	public MessageQueue(StorageAccount account)
	: this(account, typeof(T).Name.ToLowerInvariant())
	{}
	
	public MessageQueue(StorageAccount account, string queueName)
	{}
	
	public void Initialize(TimeSpan visibilityTimeout, IRetryPolicyFactory retryPolicyFactory) 
	{}
	
	In this example, the Initialize method has one concrete parameter type and one interface parameter type. You can use method injection to provide an instance of the IRetryPolicyFactory type when your dependency injection container constructs an instance of MessageQueue<T>
	
	Method call injection is useful when you want to provide some additional information about the context that the object is being used in that can't be passed in as a constructor parameter.
}

$ WHEN YOU SHOULDN'T USE DEPENDENCY INJECTION

* Dependency injection can be a overkill in a small application, introducing additional complexity and requirements that are not appropriate tor useful.
* In a large application, it can make it harder to understand the code and what is going on because things happen in other places that you can't immediately see, and yet they can fundamentally affect the bit of code you are trying to read. There are also the practical difficulties of browsing code like trying to find out what a typical implementation of the ITenantStore interface actually does.
 [Both property setter and method injectionoo may be useful when you need to support legacy code that uses properties and methods to configure instances]
* You need to carefully consider if an how to introduce dependency injection into a legacy application that was not built with inversion of control in mind. Dependency injection promotes a specific stle of layering and decoupling in a system that may pose challenges if you try to adapt an existing application, especially with an inexperienced team.
* Dependency injection is far less important in functional in functional as opposed to object-oriented programming. Funcional programming is becoming a more commo approach when testability, fault recovery, and parallelism are key requirements.
* Type registration and resolving do incur a runtime penalty: very negligible for resolving, but more so for registration. However, the registration should only happen once.
